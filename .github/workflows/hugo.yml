# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.148.2
      # Put Hugo's cache in the workspace so Actions cache can persist it
      HUGO_CACHEDIR: ${{ github.workspace }}/.hugo_cache

    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Cache Hugo processed resources (e.g., image derivatives in resources/_gen)
      - name: Cache Hugo resources
        uses: actions/cache@v4
        with:
          path: |
            resources/_gen
          key: ${{ runner.os }}-hugo-res-${{ hashFiles('layouts/**', 'themes/**', 'config.*', 'hugo.*', '**/*.{jpg,jpeg,png,webp,avif,gif,svg}') }}
          restore-keys: |
            ${{ runner.os }}-hugo-res-

      # Cache Hugo internal caches (modules/files cache)
      - name: Cache Hugo internal cache
        uses: actions/cache@v4
        with:
          path: |
            .hugo_cache
            ~/.cache/hugo
          key: ${{ runner.os }}-hugo-cache-${{ hashFiles('go.mod', 'go.sum', 'config.*', 'hugo.*') }}
          restore-keys: |
            ${{ runner.os }}-hugo-cache-

      # Setup Node with npm cache (helps npx/pagefind and any npm deps)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node.js dependencies
        run: |
          if [[ -f package-lock.json || -f npm-shrinkwrap.json ]]; then
            npm ci
          else
            echo "No lockfile found; skipping npm ci."
          fi

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      - name: Run Pagefind@alpha
        run: npm_config_yes=true npx pagefind --site "public"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
